@article{larson1989dynamic,
  author       = {Larson, Per-Ake},
  publisher    = {ACM},
  date         = {1988},
  journaltitle = {Communications of the ACM},
  number       = {4},
  pages        = {446--457},
  title        = {Dynamic hash tables},
  volume       = {31},
}

@misc{sachedina2006resizable,
  author    = {Sachedina, Aamer and Huras, Matthew A and Romanufa, Keriley K},
  publisher = {Google Patents},
  date      = {2006-08},
  note      = {US Patent 7,085,911},
  title     = {Resizable cache sensitive hash table},
}

@article{vitter2008algorithms,
  author       = {Vitter, Jeffrey Scott and others},
  publisher    = {Now Publishers, Inc.},
  date         = {2008},
  journaltitle = {Foundations and Trends® in Theoretical Computer Science},
  number       = {4},
  pages        = {305--474},
  title        = {Algorithms and data structures for external memory},
  volume       = {2},
}

@inproceedings{10.1007/11575832_11,
  abstract  = {In-memory hash tables provide fast access to large numbers of strings, with less space overhead than sorted structures such as tries and binary trees. If chains are used for collision resolution, hash tables scale well, particularly if the pattern of access to the stored strings is skew. However, typical implementations of string hash tables, with lists of nodes, are not cache-efficient. In this paper we explore two alternatives to the standard representation: the simple expedient of including the string in its node, and the more drastic step of replacing each list of nodes by a contiguous array of characters. Our experiments show that, for large sets of strings, the improvement is dramatic. In all cases, the new structures give substantial savings in space at no cost in time. In the best case, the overhead space required for pointers is reduced by a factor of around 50, to less than two bits per string (with total space required, including 5.68 megabytes of strings, falling from 20.42 megabytes to 5.81 megabytes), while access times are also reduced.},
  author    = {Askitis, Nikolas and Zobel, Justin},
  editor    = {Consens, Mariano and Navarro, Gonzalo},
  location  = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  booktitle = {String Processing and Information Retrieval},
  date      = {2005},
  isbn      = {978-3-540-32241-2},
  pages     = {91--102},
  title     = {Cache-Conscious Collision Resolution in String Hash Tables},
}

@article{hachem1993approximate,
	title={An approximate analysis of the performance of extendible hashing with elastic buckets},
	author={Hachem, Nabil I},
	journal={Information processing letters},
	volume={48},
	number={1},
	pages={13--20},
	year={1993},
	publisher={Elsevier}
}

@book{lilja2005measuring,
  author    = {Lilja, David J},
  publisher = {Cambridge university press},
  date      = {2005},
  title     = {Measuring computer performance: a practitioner's guide},
}

@article{article,
	author = {Fagin, Ronald and Nievergelt, Jürg and Pippenger, Nicholas and Raymond Strong, H},
	year = {1979},
	month = {09},
	pages = {315-344},
	title = {Extendible Hashing - A Fast Access Method for Dynamic Files.},
	volume = {4},
	journal = {ACM Trans. Database Syst.},
	doi = {10.1145/320083.320092}
}

@book{lilja2005measuring,
	title={Measuring computer performance: a practitioner's guide},
	author={Lilja, David J},
	year={2005},
	publisher={Cambridge university press}
}
